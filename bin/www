#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("lockdownserver:server");
var http = require("http");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}

/**
 * Create Socket IO
 */

const sio = require("socket.io")(server, {
  cors: {
    credentials: true,
    origin: "http://lock-down.s3-website.eu-west-3.amazonaws.com",
    //origin: "http://localhost:4200",
  },
  transports: [
    "websocket",
    "htmlfile",
    "xhr-polling",
    "jsonp-polling",
    "polling",
  ],
});

let gamesData = {};

sio.on("connection", (socket) => socketBehavior(socket));

function socketBehavior(socket) {
  console.log("Connected !");
  socket.on("disconnecting", async function () {
    const rooms = Array.from(socket.rooms);

    rooms.forEach(async (room) => {
      if (gamesData[room] != null) {
        const pseudo = gamesData[room].users.find(
          (user) => user.socketId === this.id
        ).pseudo;
        gamesData[room].users = gamesData[room].users.filter(
          (user) => user.socketId !== this.id
        );
        if (gamesData[room].validations != null) {
          delete gamesData[room].validations[pseudo];
          Array.from(gamesData[room].validations.values()).forEach(
            (user) => delete user[pseudo]
          );
        }
        await checkUsersAllReady(room);
        console.log("Room " + room + " User " + pseudo + " disconnected");
      }
    });
  });

  socket.on("createGame", async function (data) {
    console.info("createGame", data);
    const userPseudo = data.pseudo;
    const newId = createNotUsedId();
    await prepareGameData(newId);
    gamesData[newId].users.push({
      pseudo: userPseudo,
      ready: false,
      points: 0,
      answers: [],
      socketId: this.id,
    });
    socket.join(newId);
    sio
      .to(newId)
      .emit("roomData", { room: newId, users: gamesData[newId].users });
    console.info("Game successfully created : ", gamesData);
  });

  /**
   * Handle Room Events
   */

  socket.on("newUser", function (data) {
    console.info("newUser", data);
    const userPseudo = data.pseudo;
    const room = data.room;

    if (gamesData[room].step !== null) {
      socket.emit("error", "GameAlreadyStarted");
      console.info(`User ${userPseudo} tried to connect but the game is on`);
    } else {
      const listPseudo = gamesData[room].users.map((user) => user.pseudo);
      if (listPseudo.includes(userPseudo)) {
        socket.emit("error", "PseudoAlreadyInUse");
        console.info(`User ${userPseudo} already exists`);
      } else {
        gamesData[room].users.push({
          pseudo: userPseudo,
          ready: false,
          points: 0,
          answers: [],
          socketId: this.id,
        });
        socket.join(room);
        sio
          .to(room)
          .emit("roomData", { room: room, users: gamesData[room].users });
        console.info(`User ${userPseudo} added to the game`);
      }
    }
  });

  socket.on("ready", async function (data) {
    console.info("ready", data);
    const userPseudo = data.pseudo;
    const room = data.room;
    gamesData[room].users.map((user) => {
      if (user.pseudo === userPseudo) {
        user.ready = true;
      }
    });
    console.info(`User ${userPseudo} ready`);
    await checkUsersAllReady(room);
  });

  socket.on("notReady", function (data) {
    console.info("notReady", data);
    const userPseudo = data.pseudo;
    const room = data.room;
    gamesData[room].users.map((user) => {
      if (user.pseudo === userPseudo) {
        user.ready = false;
      }
    });
    sio.to(room).emit("roomData", { room: room, users: gamesData[room].users });
    console.info(`User ${userPseudo} not ready`);
  });

  /**
   * Handle Question Events
   */

  socket.on("answered", function (data) {
    console.info("answered", data);
    const userPseudo = data.pseudo;
    const userAnswer = data.answer;
    const room = data.room;
    gamesData[room].users.map((user) => {
      if (user.pseudo === userPseudo) {
        user.answers.push(userAnswer);
      }
    });
    console.info(`User ${userPseudo} answered the question with ${userAnswer}`);
    const usersAllAnswered = gamesData[room].users.every(
      (user) => user.answers.length === gamesData[room].step + 1
    );
    if (usersAllAnswered) {
      console.info(`Every users answered the question, sending answers table`);
      sendAnswersTable(room);
    }
  });

  socket.on("validateAnswer", function (data) {
    console.info("validateAnswer", data);
    const userPseudo = data.pseudo;
    const userToValidate = data.userToValidate;
    const room = data.room;
    gamesData[room].validations[userToValidate][userPseudo] = true;
    sio.to(room).emit("validationTable", gamesData[room].validations);
    console.info(`User ${userPseudo} validate the answer of ${userToValidate}`);
  });

  socket.on("rejectAnswer", function (data) {
    console.info("rejectAnswer", data);
    const userPseudo = data.pseudo;
    const userToValidate = data.userToValidate;
    const room = data.room;
    gamesData[room].validations[userToValidate][userPseudo] = false;
    sio.to(room).emit("validationTable", gamesData[room].validations);
    console.info(`User ${userPseudo} reject the answer of ${userToValidate}`);
  });
}

const questionDb = require("../src/db/questions.db");
const questionsController = require("../src/controllers/questions.controller");

async function checkUsersAllReady(room) {
  sio.to(room).emit("roomData", { room: room, users: gamesData[room].users });
  const usersAllReady = gamesData[room].users.every((user) => user.ready);
  if (usersAllReady) {
    if (gamesData[room].step === gamesData[room].questions.length) {
      console.info(`Every users ready, restarting game`);
      await restartGame(room);
    } else {
      console.info(`Every users ready, sending next question`);
      gamesData[room].users.map((user) => (user.ready = false));
      sendNextRound(room);
    }
  }
}

async function restartGame(gameId) {
  await prepareQuestions(gameId);
  gamesData[gameId].step === null;
  gamesData[gameId].users.map((user) => {
    user.ready = false;
    user.points = 0;
    user.answers = [];
  });
  sio.to(gameId).emit("restartGame", gamesData[gameId].users);
}

async function prepareGameData(gameId) {
  gamesData[gameId] = {
    users: [],
    questions: [],
    answers: [],
    step: null,
  };
  await prepareQuestions(gameId);
}

async function prepareQuestions(gameId) {
  const questions = await questionDb.getRandomQuestions(2);
  questions.map((question) => {
    const { round, answer } = questionsController.questionToRoundAndAnswer(
      question
    );
    gamesData[gameId].questions.push(round);
    gamesData[gameId].answers.push(answer);
  });
}

function sendNextRound(gameId) {
  if (gamesData[gameId].step === null) {
    gamesData[gameId].step = 0;
  } else {
    gamesData[gameId].step += 1;
    gamesData[gameId].users.map((user) => {
      const pseudo = user.pseudo;
      let nbrOfValidation = 0;
      for (var key in gamesData[gameId].validations[pseudo]) {
        if (gamesData[gameId].validations[pseudo][key]) {
          nbrOfValidation += 1;
        }
      }
      if (nbrOfValidation >= gamesData[gameId].users.length) {
        user.points += 1;
      }
    });
  }
  gamesData[gameId].validations = null;
  if (gamesData[gameId].step === gamesData[gameId].questions.length) {
    sendScoreTable(gameId);
  } else {
    sio.to(gameId).emit("round", {
      round: gamesData[gameId].questions[gamesData[gameId].step],
      roundNumber: gamesData[gameId].step + 1,
      totalRounds: gamesData[gameId].questions.length,
    });
  }
}

function sendAnswersTable(gameId) {
  const objToSend = {
    roundNumber: gamesData[gameId].step + 1,
    totalRounds: gamesData[gameId].questions.length,
    round: gamesData[gameId].questions[gamesData[gameId].step],
    answer: gamesData[gameId].answers[gamesData[gameId].step],
    userAnswers: gamesData[gameId].users.map((user) => {
      return {
        pseudo: user.pseudo,
        answer: user.answers[gamesData[gameId].step],
      };
    }),
  };
  setValidationTable(gameId);
  sio.to(gameId).emit("answers", objToSend);
}

function setValidationTable(gameId) {
  gamesData[gameId].validations = {};
  gamesData[gameId].users.map((firstUser) => {
    const firstPseudo = firstUser.pseudo;
    const listUsersWithValidation = {};
    gamesData[gameId].users.map((secondUser) => {
      const secondPseudo = secondUser.pseudo;
      listUsersWithValidation[secondPseudo] = true;
    });
    gamesData[gameId].validations[firstPseudo] = listUsersWithValidation;
  });
}

function sendScoreTable(gameId) {
  sio.to(gameId).emit("results", gamesData[gameId].users);
}

function createNotUsedId() {
  let myNewId = createId();
  while (gamesData[myNewId] != null) {
    myNewId = createId();
  }
  return myNewId;
}

function createId() {
  var result = "";
  var characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  var charactersLength = characters.length;
  for (var i = 0; i < 6; i++) {
    result += characters.charAt(Math.floor(Math.random() * charactersLength));
  }
  return result;
}
